// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "IOT/grpc/protocol_plugin/";


// option java_multiple_files = true;
// option java_package = "io.grpc.examples.helloworld";
// option java_outer_classname = "HelloWorldProto";

package protocol_plugin;

// The greeting service definition.
service ProtocolPluginService {
  rpc PluginDeviceConfig (PluginDeviceConfigRequest) returns (PluginDeviceConfigReply) {}
  rpc PluginDeviceConfigList (PluginDeviceConfigListRequest) returns (PluginDeviceConfigListReply) {}
}

// PluginDeviceConfig
message PluginDeviceConfigRequest {
  string accessToken = 1;
  string deviceID = 2;
}
/*
type SubDeviceConfig struct {
		AccessToken   string                 `json:"AccessToken"`
		DeviceID      string                 `json:"DeviceId"`
		SubDeviceAddr string                 `json:"SubDeviceAddr"`
		Config        map[string]interface{} `json:"Config"` // 表单配置
	}
	type DeviceConfig struct {
		ProtocolType string                 `json:"ProtocolType"`
		AccessToken  string                 `json:"AccessToken"`
		DeviceType   string                 `json:"DeviceType"`
		ID           string                 `json:"Id"`
		DeviceConfig map[string]interface{} `json:"DeviceConfig,omitempty"` // 表单配置
		SubDevices   []SubDeviceConfig      `json:"SubDevices,omitempty"`
	}
  */
message PluginDeviceConfigReply {
  bytes data = 1;
}

// PluginDeviceConfigList
message PluginDeviceConfigListRequest {
  string protocolType = 1;
  string deviceType = 2;
}
/*
type SubDevice struct {
		AccessToken   string                 `json:"AccessToken"`
		DeviceId      string                 `json:"DeviceId"`
		SubDeviceAddr string                 `json:"SubDeviceAddr"`
		DeviceConfig  map[string]interface{} `json:"DeviceConfig"`
	}
	type DeviceConfig struct {
		ProtocolType string                 `json:"ProtocolType"`
		AccessToken  string                 `json:"AccessToken"`
		DeviceType   string                 `json:"DeviceType"`
		ID           string                 `json:"Id"`
		DeviceConfig map[string]interface{} `json:"DeviceConfig,omitempty"`
		SubDevice    []SubDevice            `json:"SubDevice,omitempty"`
	}
  []DeviceConfig
*/
message PluginDeviceConfigListReply {
  bytes data = 1;
}